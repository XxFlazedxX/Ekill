local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local gui = Instance.new("ScreenGui")
gui.Name = "FlazedGUI"
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = game:GetService("CoreGui")

-- Frame (smaller)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 180, 0, 84)
frame.Position = UDim2.new(1, -190, 0, 20)
frame.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
frame.BackgroundTransparency = 0.15
frame.BorderSizePixel = 0
frame.Parent = gui

Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)
local stroke = Instance.new("UIStroke", frame)
stroke.Color = Color3.fromRGB(90, 90, 90)
stroke.Thickness = 1

-- Title (renamed)
local title = Instance.new("TextLabel")
title.Text = "By Flazed"
title.Size = UDim2.new(1, -16, 0, 18)
title.Position = UDim2.new(0, 8, 0, 4)
title.BackgroundTransparency = 1
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.GothamSemibold
title.TextSize = 12
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = frame

-- Animated Dot
local dot = Instance.new("Frame")
dot.Size = UDim2.new(0, 6, 0, 6)
dot.Position = UDim2.new(0, 10, 0, 10)
dot.BackgroundColor3 = Color3.fromRGB(255, 0, 127)
dot.BorderSizePixel = 0
dot.Parent = frame
Instance.new("UICorner", dot).CornerRadius = UDim.new(1, 0)

task.spawn(function()
	while true do
		TweenService:Create(dot, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
			Position = UDim2.new(0, 160, 0, 10)
		}):Play()
		task.wait(1)
		TweenService:Create(dot, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
			Position = UDim2.new(0, 10, 0, 10)
		}):Play()
		task.wait(1)
	end
end)

-- Rotating Ring
local ring = Instance.new("ImageLabel")
ring.Size = UDim2.new(0, 22, 0, 22)
ring.Position = UDim2.new(0.5, -11, 1, -26)
ring.AnchorPoint = Vector2.new(0.5, 0.5)
ring.BackgroundTransparency = 1
ring.Image = "rbxassetid://6031091009"
ring.ImageColor3 = Color3.fromRGB(255, 0, 127)
ring.ZIndex = 2
ring.Parent = frame

RunService.RenderStepped:Connect(function()
	ring.Rotation += 1
end)

-- Kill Status (CLICK TO TOGGLE)
local killStatus = Instance.new("TextButton")
killStatus.Text = "Kill: OFF"
killStatus.Size = UDim2.new(1, -16, 0, 18)
killStatus.Position = UDim2.new(0, 8, 0, 26)
killStatus.BackgroundTransparency = 1
killStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
killStatus.Font = Enum.Font.Gotham
killStatus.TextSize = 12
killStatus.TextXAlignment = Enum.TextXAlignment.Left
killStatus.AutoButtonColor = false
killStatus.Parent = frame

-- Sub status labels
local touchStatus = Instance.new("TextLabel")
touchStatus.Text = "Touch: ON"
touchStatus.Size = UDim2.new(1, -16, 0, 16)
touchStatus.Position = UDim2.new(0, 8, 0, 44)
touchStatus.BackgroundTransparency = 1
touchStatus.TextColor3 = Color3.fromRGB(180, 180, 180)
touchStatus.Font = Enum.Font.Gotham
touchStatus.TextSize = 11
touchStatus.TextXAlignment = Enum.TextXAlignment.Left
touchStatus.Parent = frame

local ragdollStatus = Instance.new("TextLabel")
ragdollStatus.Text = "Ragdoll: ON"
ragdollStatus.Size = UDim2.new(1, -16, 0, 16)
ragdollStatus.Position = UDim2.new(0, 8, 0, 60)
ragdollStatus.BackgroundTransparency = 1
ragdollStatus.TextColor3 = Color3.fromRGB(180, 180, 180)
ragdollStatus.Font = Enum.Font.Gotham
ragdollStatus.TextSize = 11
ragdollStatus.TextXAlignment = Enum.TextXAlignment.Left
ragdollStatus.Parent = frame

-- ===== Grapple Kill Logic & State =====
local damagePart = workspace:FindFirstChild("Pit") and workspace.Pit:FindFirstChild("Damage")
local damageTouchedConnection
local isKillOn = false -- manual toggle state

local function ensureDamagePart()
	if damagePart and damagePart.Parent then return true end
	if workspace:FindFirstChild("Pit") then
		damagePart = workspace.Pit:FindFirstChild("Damage")
	end
	return damagePart ~= nil
end

local function enableDamage()
	if not ensureDamagePart() then return end
	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local root = character:WaitForChild("HumanoidRootPart")
	damagePart.CFrame = root.CFrame
	damagePart.Size = Vector3.new(9999999, 9999999, 9999999)
	if not damageTouchedConnection then
		damageTouchedConnection = damagePart.Touched:Connect(function(hit)
			if hit.Parent and hit.Parent:FindFirstChild("Humanoid") then
				hit.Parent.Humanoid.Health = 0
			end
		end)
	end
end

local function disableDamage()
	if damageTouchedConnection then
		damageTouchedConnection:Disconnect()
		damageTouchedConnection = nil
	end
	if damagePart then
		damagePart.Size = Vector3.new(10, 10, 10)
		damagePart.Position = Vector3.new(0, -5000, 0)
	end
end

local function updateUI()
	killStatus.Text = isKillOn and "Kill: ON" or "Kill: OFF"
	killStatus.TextColor3 = isKillOn and Color3.fromRGB(255, 100, 140) or Color3.fromRGB(255, 255, 255)
end

disableDamage()
updateUI()

-- Click = toggle persistent ON/OFF
killStatus.MouseButton1Click:Connect(function()
	isKillOn = not isKillOn
	if isKillOn then enableDamage() else disableDamage() end
	updateUI()
end)

-- F = 2-second pulse (only if not already ON)
UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.F then
		if isKillOn then
			-- already ON by user; do nothing (donâ€™t cut it off)
			return
		end
		-- temporary ON
		enableDamage()
		killStatus.Text = "Kill: ON"
		task.delay(2, function()
			-- turn OFF only if user still hasn't toggled it ON
			if not isKillOn then
				disableDamage()
				updateUI()
			end
		end)
	end
end)

-- Always apply: No touch
local function applyNoTouchToPart(part)
	if part:IsA("BasePart") then
		part.CanCollide = false
		part.CanTouch = false
	end
end

local function applyNoTouchToCharacter(character)
	for _, part in ipairs(character:GetDescendants()) do
		applyNoTouchToPart(part)
	end
	character.DescendantAdded:Connect(applyNoTouchToPart)
end

LocalPlayer.CharacterAdded:Connect(applyNoTouchToCharacter)
if LocalPlayer.Character then applyNoTouchToCharacter(LocalPlayer.Character) end
touchStatus.Text = "Touch: ON"

-- Always apply: Remove ragdoll
local function monitorRagdoll(character)
	task.spawn(function()
		while character and character.Parent do
			local ragdoll = character:FindFirstChild("ragdollValue")
			if ragdoll then ragdoll:Destroy() end
			task.wait(0.1)
		end
	end)
end

LocalPlayer.CharacterAdded:Connect(monitorRagdoll)
if LocalPlayer.Character then monitorRagdoll(LocalPlayer.Character) end

-- Dragging
local dragging = false
local dragStart, startPos

frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then dragging = false end
		end)
	end
end)

frame.InputChanged:Connect(function(input)
	if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)
